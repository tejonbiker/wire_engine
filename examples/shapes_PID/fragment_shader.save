"struct DirectionalLight{\n"
"vec3 direction;\n"
"vec3 halfplane;\n"
"vec4 ambientColor;\n"
"vec4 diffuseColor;\n"
"vec4 specularColor;\n"
"};\n"
"struct Material{\n"
"	vec4 ambientFactor;\n"
"	vec4 diffuseFactor;\n"
"	vec4 specularFactor;\n"
"	float shininess;\n"
"};\n"
"uniform DirectionalLight u_directionalLight;\n"
"uniform Material u_material;\n"
"varying  vec4			DestColor;\n"
"varying  vec3          ecNormal;\n"
"varying  vec2			fTextureCoords;\n"
"uniform  sampler2D		Texture;\n"
"uniform  sampler2D		NextTexture;\n"
"uniform  int			plotPoints;\n"
"		   vec4			colorShape;\n"
"uniform  float			factorBlend;\n"
"\n"
"void main(void)\n"
"{\n"
"   if(plotPoints!=1)\n"
"	{\n"
"		float ecNormalDotLightDirection = max(0.0,dot(ecNormal,u_directionalLight.direction));\n"
"		float ecNormalDotLightHalfplane = max(0.0,dot(ecNormal,u_directionalLight.halfplane));\n"
"\n"
"		vec4 ambientLight=u_directionalLight.ambientColor*u_material.ambientFactor;\n"
"		vec4 diffuseLight=ecNormalDotLightDirection*u_directionalLight.diffuseColor*u_material.diffuseFactor;\n"
"\n"
"		vec4 specularLight = vec4(0.0,0.0,0.0,0.0);\n"
"\n"
"		if(ecNormalDotLightHalfplane>0.0)\n"
"		{\n"
"			specularLight=pow(ecNormalDotLightHalfplane,u_material.shininess)*u_directionalLight.specularColor * u_material.specularFactor;\n"
"		}\n"
"\n"
"		vec4 light = ambientLight + diffuseLight + specularLight;\n"
"\n"
"		colorShape= texture2D(Texture,fTextureCoords);\n"
"		gl_FragColor=vec4(fTextureCoords.x,fTextureCoords.y,0.0,1.0)/2.0 + colorShape/2.0 ;\n"
"		gl_FragColor=light*colorShape;\n""	}\n"
	else\n"
		gl_FragColor=DestColor;\n"
}
